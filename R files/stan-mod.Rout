
R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-conda_cos6-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #library("rstanarm")
> library("ggplot2")
> # library("rstan")
> library("dplyr")

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> #install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
> library("cmdstanr")
This is cmdstanr version 0.2.0
- Online documentation and vignettes at mc-stan.org/cmdstanr
- Use set_cmdstan_path() to set the path to CmdStan
- Use install_cmdstan() to install CmdStan
> 
> #directory when using cluster
> setwd("/storage/users/gmilne/test")   ### get this to work
> 
> #read in data
> # data <- read.csv("data/netherlands_95.csv")
> #read in scripts
> # source("R files/setparms.R")
> # source("R files/demogdat.R")
> 
> #NB change of directory for using cluster
> data <- read.csv("netherlands_95.csv")
> source("setparms.R")
> source("demogdat.R")
> 
> # data needed for parameter estimation
> clean_dat <- data.frame("age_mid"=data$age_mid, "k"=data$k, "n"=data$n)
> data_agrps <- length(clean_dat[,"age_mid"])
> 
> ######################################################
> ## modify data age groups to match model age groups ##
> ######################################################
> #create new dataset
> matched_dat <- clean_dat
> # x[,2] increases by one each time data age midpoint is closest match to modelled age midpoint
> x <- cbind(pars$age, findInterval(pars$age, matched_dat$age_mid))
> #head(x, n=12)
> #returns FALSE if there's change between element i and element i+1
> y1 <- diff(x[,2]) <= 0   #so save i+1 element of x[,1] to matched_ages[i]
> #head(y, n=12)
> 
> # each time x[,2] increases by 1, save value of x[,1][i+1] to matched_dat$age_mid[i]
> matched_ages <- vector("numeric", pars$agrps)
> for(i in 1:length(y1)){
+   if(y1[i]==T){
+     matched_ages[i] <- NA
+     
+   }else if(y1[i]==F){
+     matched_ages[i] <- x[,1][i+1]
+   }
+ }
> #removes last element (which is 0 because of indexing)
> matched_ages <- head(matched_ages, -1)
> #remove NAs
> matched_ages <-matched_ages[!is.na(matched_ages)]
> #save age mid points to dataset
> matched_dat$age_mid <- matched_ages
> 
> ###################################################
> ## merge data into larger df for simpler fitting ##
> ###################################################
> mod_dat <- data.frame("age_mid"=pars$age,"k"=0, "n"=0)
> merged_dat <- merge(matched_dat, mod_dat, by='age_mid', all=TRUE)
> merged_dat[is.na(merged_dat)] <- 0
> full_data <- data.frame("age_mid"=merged_dat[,1], "k"=merged_dat[,2], "n"=merged_dat[,3])
> 
> ##check age combined as expected (differences should be the same)
> # age_diff <- vector("numeric", length=length(full_data$age_mid)-1)
> # for(i in 1:length(full_data$age_mid)-1){
> #   if(i==1){
> #     age_diff[i] <- 0
> #   }else{
> #     age_diff[i] <- full_data$age_mid[i+1] - full_data$age_mid[i]
> #   }
> # }
> 
> ############################################
> # read in data needed for model simulation #
> ############################################
> agrps <- length(full_data$age_mid)
> # cases <- full_data$k
> # n <- full_data$n
> cases <- data$k
> n <- data$n
> ######################################
> # read in other parameters for model #
> ######################################
> t0 = 0 
> ts <- seq(1,249, 1)
> t <-max(ts)
> N <- sum(pars$Na)
> age_prop <- pars$Na/N
> 
> #index of rows of expanded df in which data exist
> data_rows <- c(which(full_data$k!=0), which(full_data$k!=0)+agrps, which(full_data$k!=0)+2*agrps)
> 
> ###################### 
> # data list for Stan #
> ######################
> data_si = list(
+   agrps = pars$agrps, 
+   data_agrps = data_agrps,
+   data_rows=data_rows,
+   age_prop=age_prop,
+   tot_pop=N, 
+   # age=pars$age,
+   da=pars$da,
+   d=pars$d,
+   r=pars$r,
+   mctr=pars$mctr,
+   #mean_mctr = mean(pars$mctr),
+   propfert=pars$propfert,
+   K=3,  #no. state variables
+   t0 = t0,
+   ts = ts, 
+   t=t,
+   n=full_data$n, #n
+   cases=full_data$k, #k
+   rel_tol = 1.0E-10, 
+   abs_tol = 1.0E-10,
+   max_num_steps = 1.0E3,
+   inference=1, 
+   doprint=0)
> 
> ###################
> # CmdStan running #
> ###################
> # file <- "R files/stan-mod-simple.stan"
> # file <- "R files/stan-mod-complex.stan"
> 
> #change of directory for cluster
> file <- "stan-mod-simple.stan"
> 
> mod <- cmdstan_model(file)
Compiling Stan program...
Error: CmdStan path has not been set yet. See ?set_cmdstan_path.
Execution halted
